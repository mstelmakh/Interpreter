(* General *)
program                 = {declaration | statement}, EOF ;
declaration             = function_declaration
                        | variable_declaration ;
function_declaration    = "fn" function ;
variable_declaration    = "var" IDENTIFIER ["=" assignment] ";" ;
assignment              = IDENTIFIER "=" assignment
                        | expression ;
block                   = "{" {declaration | statement} "}" ;

(* Statements *)
statement               = expression_statement
                        | if_statement
                        | while_statement
                        | return_statement ;
expression_statement    = assignment ";" ;
if_statement            = "if" "(" expression ")" (statement | block) ["else" (statement | block)] ;
while_statement         = "while" "(" expression ")" (statement | block) ;
return_statement        = "return" [expression] ";" ;

(* Expressions *)
expression              = logical_or ;
logical_or              = logical_and {"or" logical_and} ;
logical_and             = equality {"and" equality} ;
equality                = comparison {("!=" | "==") comparison} ;
comparison              = term [(">" | ">=" | "<" | "<=") term] ;
term                    = factor {("-" | "+") factor} ;
factor                  = unary {("/" | "*") unary} ;
unary                   = ("!" | "-") unary
                        | call
                        | LITERAL
                        | "(" expression ")" ;
call                    = IDENTIFIER {"(" [arguments] ")"} ;

(* Helpers for expressions *)
function                = IDENTIFIER "(" [parameters] ")" block ;
parameters              = IDENTIFIER {"," IDENTIFIER} ;
arguments               = expression {"," expression} ;

(* Literals *)
LITERAL                 = NUMBER
                        | STRING
                        | "true"
                        | "false"
                        | "nil";
NUMBER                  = (
                            "0"
                            | DIGIT_NON_ZERO {DIGIT}
                        ) ["." DIGIT {DIGIT}] ;
STRING                  = "\"" {any_char - "\""} "\"" ;
IDENTIFIER              = ALPHA {ALPHA | DIGIT} ;
ALPHA                   = LETTER | "_" ;
LETTER                  = "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" ;
DIGIT                   = "0" | DIGIT_NON_ZERO ;
DIGIT_NON_ZERO          = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;