(* General *)
program                 = {statement}, EOF ;
declaration             = function_declaration
                        | variable_declaration ;
function_declaration    = "fn" IDENTIFIER "(" [parameters] ")" block ;
variable_declaration    = ("var" | "const") IDENTIFIER ["=" logical_or] ";" ;
block                   = "{" {statement} "}" ;

(* Statements *)
statement               = declaration
                        | expression_statement
                        | if_statement
                        | while_statement
                        | return_statement ;
expression_statement    = expression ";" ;
if_statement            = "if" "(" expression ")" (statement | block) ["else" (statement | block)] ;
while_statement         = "while" "(" expression ")" (statement | block) ;
return_statement        = "return" [expression] ";" ;

(* Pattern matching *)
match_statement         = "match" "(" arguments ")" "{" {case_block} "}" ;
case_block              = "(" pattern_expression {"," pattern_expression} ")" [guard] ":" (statement | block) ;
guard                   = "if" "(" expression ")" ;
pattern_expression      = ("_" | pattern) ["as" IDENTIFIER] ;
pattern                 = or_pattern ;
or_pattern              = and_pattern {"or" and_pattern} ;
and_pattern             = closed_pattern {"and" closed_pattern} ;
closed_pattern          = compare_pattern
                        | type_pattern ;
compare_pattern         = (EQUALITY_SIGN | COMPARISON_SIGN) unary ;
type_pattern            = TYPE ;

(* Expressions *)
expression              = assignment ;
assignment              = IDENTIFIER "=" logical_or ;
logical_or              = logical_and {"or" logical_and} ;
logical_and             = equality {"and" equality} ;
equality                = comparison {EQUALITY_SIGN comparison} ;
comparison              = term [COMPARISON_SIGN term] ;
term                    = factor {("-" | "+") factor} ;
factor                  = unary {("/" | "*") unary} ;
unary                   = ["not" | "-"] primary ;
primary                 = call
                        | IDENTIFIER
                        | LITERAL
                        | "(" expression ")" ;
call                    = IDENTIFIER "(" [arguments] ")" {"(" [arguments] ")"} ;

(* Helpers for expressions *)
parameter               = ["const"] IDENTIFIER ;
parameters              = parameter {"," parameter} ;
arguments               = expression {"," expression} ;


(* Literals *)
LITERAL                 = NUMBER
                        | STRING
                        | BOOLEAN
                        | "nil";
TYPE                    = "Str" | "Num" | "Bool" | "Func" | "Nil" ;
NUMBER                  = INTEGER | FLOAT ;
FLOAT                   = INTEGER "." DIGIT {DIGIT} ;
INTEGER                 = "0"
                        | DIGIT_NON_ZERO {DIGIT} ;
BOOLEAN                 = "true" | "false" ;
STRING                  = "\"" {CHAR} "\"" ;
CHAR                    = (any_char - "\"" - "\\")
                        | "\\" escape ;
ESCAPE                  = "t" | "b" | "r" | "n" | "\"" | "\\" ;
IDENTIFIER              = ALPHA {ALPHA | DIGIT} ;
ALPHA                   = LETTER | "_" ;
LETTER                  = "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" ;
DIGIT                   = "0" | DIGIT_NON_ZERO ;
DIGIT_NON_ZERO          = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
COMPARISON_SIGN         = ">" | ">=" | "<" | "<=" ;
EQUALITY_SIGN           = "!=" | "==" ;
